//
//  ChatViewController.swift
//  Rudder
//
//  Created by 박민호 on 2022/06/20.
//

import UIKit
import SwiftStomp
import SquareInAppPaymentsSDK
import CoreLocation

class ChatViewController: UIViewController, OrderViewControllerDelegate, UIViewControllerTransitioningDelegate, SQIPCardEntryViewControllerDelegate, PKPaymentAuthorizationViewControllerDelegate {
    
    var userInfoId: Int! //채팅 구별 위해
    
    func paymentAuthorizationViewControllerDidFinish(_ controller: PKPaymentAuthorizationViewController) {
        print("finished")
    }
    
    func cardEntryViewController(_ cardEntryViewController: SQIPCardEntryViewController, didObtain cardDetails: SQIPCardDetails, completionHandler: @escaping (Error?) -> Void) {
        print("Payment token (nonce) generated by In-App Payments SDK: \(cardDetails.nonce)")
                
    }
    
    //이거 두개 차이는 뭐임?
    func cardEntryViewController(_ cardEntryViewController: SQIPCardEntryViewController, didCompleteWith status: SQIPCardEntryCompletionStatus) {
        print("Payment token (nonce) generated by In-App Payments SDK")
    }
    
    func didRequestPayWithApplyPay() {
        dismiss(animated: true) {
            self.requestApplePayAuthorization()
        }
    }
    
    func didRequestPayWithCard() {
        dismiss(animated: true) {
            
                    let vc = self.makeCardEntryViewController()
                    vc.delegate = self

                    let nc = UINavigationController(rootViewController: vc)
                    self.present(nc, animated: true, completion: nil)
                }
    }
    
    func makeCardEntryViewController() -> SQIPCardEntryViewController {
            // Customize the card payment form
            let theme = SQIPTheme()
            theme.errorColor = .red
            theme.tintColor = Color.primaryAction
            theme.keyboardAppearance = .light
            theme.messageColor = Color.descriptionFont
            theme.saveButtonTitle = "Pay"

            return SQIPCardEntryViewController(theme: theme)
        }
 
    func requestApplePayAuthorization() {
            guard SQIPInAppPaymentsSDK.canUseApplePay else {
                return
            }

           /* guard appleMerchanIdSet else {
                showMerchantIdNotSet()
                return
            }*/

            let paymentRequest = PKPaymentRequest.squarePaymentRequest(
                merchantIdentifier: Constants.ApplePay.MERCHANT_IDENTIFIER,
                countryCode: Constants.ApplePay.COUNTRY_CODE,
                currencyCode: Constants.ApplePay.CURRENCY_CODE
            )

            paymentRequest.paymentSummaryItems = [
                PKPaymentSummaryItem(label: "Super Cookie", amount: 1.00)
            ]

            let paymentAuthorizationViewController = PKPaymentAuthorizationViewController(paymentRequest: paymentRequest)

            paymentAuthorizationViewController!.delegate = self

            present(paymentAuthorizationViewController!, animated: true, completion: nil)
        }

    
    
    @IBOutlet weak var textField: UITextField!
    @IBOutlet weak var chatTableView: UITableView!
    
    private var chats: [Chat] = [Chat(chatMessageId: 1, chatMessageBody: "my love", chatMessageTime: "my love", sendUserInfoId: 1, sendUserNickname: "myco sdf", isMine: true, chatRoomId: 234)]
    
    private var swiftStomp: SwiftStomp!
    private var messageIndex = 0
    
    private var locationManager = CLLocationManager()
    

    func aboutLocation(){
        
        locationManager.delegate = self
        locationManager.desiredAccuracy = kCLLocationAccuracyBest
        locationManager.requestWhenInUseAuthorization()
        
        if CLLocationManager.locationServicesEnabled() {
            print("위 서 on")
            locationManager.startUpdatingLocation()
            print(locationManager.location?.coordinate)
        }
    }
    
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        aboutLocation()
        
        userInfoId = UserDefaults.standard.integer(forKey: "userInfoId")
        
       

        initStomp()
        registerObservers()
        
        chatTableView.separatorStyle = .none
        
        let myCellNib: UINib = UINib.init(nibName: "MyChatCell", bundle: nil)
        self.chatTableView.register(myCellNib, forCellReuseIdentifier: "myChatCell")
        
        let yourCellNib: UINib = UINib.init(nibName: "YourChatCell", bundle: nil)
        self.chatTableView.register(yourCellNib, forCellReuseIdentifier: "yourChatCell")
        
        //refreshControll에 관한것들
        
        self.chatTableView.estimatedRowHeight = 200 //autolatyout 잘 작동하게 대략적인 높이?
        self.chatTableView.rowHeight = UITableView.automaticDimension
        // Do any additional setup after loading the view.
    }
    
    private func initStomp(){
    
        let url = URL(string: "ws://test.rudderuni.com/ws")!
        
        self.swiftStomp = SwiftStomp(host: url)
        self.swiftStomp.enableLogging = true
        self.swiftStomp.delegate = self
        self.swiftStomp.autoReconnect = true
                
        self.swiftStomp.enableAutoPing()
    }

    private func registerObservers(){
        //NotificationCenter.default.addObserver(self, selector: #selector(appWillResignActive), name: NSNotification.Name.willResignActiveNotification, object: nil)
        //NotificationCenter.default.addObserver(self, selector: #selector(appDidBecomeActive), name: NSNotification.Name.UIApplication.didBecomeActiveNotification, object: nil)
        
    }
    /**
     * Observer functions
     */
    @objc func appDidBecomeActive(notification : Notification){
        if !self.swiftStomp.isConnected{
            self.swiftStomp.connect()
        }
    }
    
    @objc func appWillResignActive(notication : Notification){
        if self.swiftStomp.isConnected{
            self.swiftStomp.disconnect(force: true)
        }
    }
    
    @IBAction func triggerConnect(_ sender: Any) {
        if !self.swiftStomp.isConnected{
            self.swiftStomp.connect()
        }
        
    }
        
    @IBAction func triggerDisconnect(_ sender: Any) {
        if self.swiftStomp.isConnected{
            self.swiftStomp.disconnect()
        }
    }
}

extension ChatViewController: SwiftStompDelegate{
    
    func onConnect(swiftStomp: SwiftStomp, connectType: StompConnectType) {
            if connectType == .toSocketEndpoint{
                print("Connected to socket")
            } else if connectType == .toStomp{
                print("Connected to stomp")
                
                //** Subscribe to topics or queues just after connect to the stomp!
                swiftStomp.subscribe(to: "/topic/1")
                //swiftStomp.subscribe(to: "/topic/greeting2")
                
            }
        }
        
        func onDisconnect(swiftStomp: SwiftStomp, disconnectType: StompDisconnectType) {
            if disconnectType == .fromSocket{
                print("Socket disconnected. Disconnect completed")
            } else if disconnectType == .fromStomp{
                print("Client disconnected from stomp but socket is still connected!")
            }
        }
        
        func onMessageReceived(swiftStomp: SwiftStomp, message: Any?, messageId: String, destination: String, headers : [String : String]) {
            
            if let message = message as? Data {
                print("as DATA")
                handleMessageBody(message: message)
            }else if let message = message as? String{
                let dMessage = message.data(using: .utf8)!
                handleMessageBody(message: dMessage)
                print("as STRING")
            }
            
            print()
        }
        
        func onReceipt(swiftStomp: SwiftStomp, receiptId: String) {
            print("Receipt with id `\(receiptId)` received")
        }
        
        func onError(swiftStomp: SwiftStomp, briefDescription: String, fullDescription: String?, receiptId: String?, type: StompErrorType) {
            if type == .fromSocket{
                print("Socket error occurred! [\(briefDescription)]")
            } else if type == .fromStomp{
                print("Stomp error occurred! [\(briefDescription)] : \(String(describing: fullDescription))")
            } else {
                print("Unknown error occured!")
            }
        }
        
        func onSocketEvent(eventName: String, description: String) {
            print("Socket event occured: \(eventName) => \(description)")
        }
    
    
}

extension ChatViewController {
    func handleMessageBody(message: Data){
        print("touch here")
        let decoder:JSONDecoder = JSONDecoder()
        do {
            
            let decodedResponse: Chat = try decoder.decode(Chat.self, from: message)
            DispatchQueue.main.async {
                
                print("비교" + String(decodedResponse.sendUserInfoId) + " " + String(self.userInfoId))
                
                guard decodedResponse.sendUserInfoId != self.userInfoId else {return}
                
                self.chats.append(Chat(chatMessageId: decodedResponse.chatMessageId, chatMessageBody: decodedResponse.chatMessageBody, chatMessageTime: decodedResponse.chatMessageTime, sendUserInfoId: decodedResponse.sendUserInfoId, sendUserNickname: decodedResponse.sendUserNickname, isMine: decodedResponse.isMine, chatRoomId: 123))
                //mock
                
             
                
                self.chatTableView.beginUpdates()
                self.chatTableView.insertRows(at: [IndexPath.init(row: self.chats.count-1, section: 0)], with: .none)
                self.chatTableView.endUpdates()
                let indexPath = NSIndexPath(item: self.chats.count-1, section: 0);
                self.chatTableView.scrollToRow(at: indexPath as IndexPath, at: UITableView.ScrollPosition.middle, animated: true)
                //self.textField.text = decodedResponse.chatMessageBody
               // completion(decodedResponse.likeCount)
            }
        } catch {
            print("응답 디코딩 실패")
            print(error.localizedDescription)
            dump(error)
            DispatchQueue.main.async {
               // completion(-1)
            }
        }
    }
    
    @IBAction func sendChat(_ sender: UIButton) {
        
        self.chats.append(Chat(chatMessageId: 123, chatMessageBody: textField.text!, chatMessageTime: "123", sendUserInfoId: userInfoId, sendUserNickname: "mockNickname", isMine: true, chatRoomId: 123))
        
     
        
        self.chatTableView.beginUpdates()
        self.chatTableView.insertRows(at: [IndexPath.init(row: self.chats.count-1, section: 0)], with: .none)
        self.chatTableView.endUpdates()
        let indexPath = NSIndexPath(item: self.chats.count-1, section: 0);
        self.chatTableView.scrollToRow(at: indexPath as IndexPath, at: UITableView.ScrollPosition.middle, animated: true)
        
        RequestSendChat.uploadInfo(channelId: 1, chatBody: textField.text!, completion: {
           status in
            if status == 1 {
                print("send chat success")
            }
        })
    }
}

extension ChatViewController: UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return chats.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let myCell: MyChatCell
        myCell = tableView.dequeueReusableCell(withIdentifier: "myChatCell", for: indexPath) as! MyChatCell
        let yourCell: YourChatCell
        yourCell = tableView.dequeueReusableCell(withIdentifier: "yourChatCell", for: indexPath) as! YourChatCell
        // cell.delegate = self
        
        guard indexPath.row < chats.count else {
            return myCell
        }
        
        let chat: Chat = chats[indexPath.row]
        
        if userInfoId == chat.sendUserInfoId {
            myCell.configure(chat: chat, tableView: chatTableView, indexPath: indexPath)
            return myCell
        } else {
            yourCell.configure(chat: chat, tableView: chatTableView, indexPath: indexPath)
            return yourCell
        }
        //endPostId = post.postId
     
        
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        /*if let cell: UITableViewCell = tableView.cellForRow(at: indexPath) {
            indexPathForSelectedRow = indexPath as NSIndexPath
            self.performSegue(withIdentifier: "ShowMessageRoom", sender: cell)
            //indexPathForSelectedRow = indexPath as NSIndexPath
           // cell.selectionStyle = .none
        }*/
    }
}

extension ChatViewController {
    @IBAction func tapPayButton(_ sender: UIButton) {
        showOrderSheet()
    }
    
    private func showOrderSheet() {
           // Open the buy modal
           let orderViewController = OrderViewController(str: "Tae")
           orderViewController.delegate = self
           let nc = OrderNavigationController(rootViewController: orderViewController)
           nc.modalPresentationStyle = .custom
           nc.transitioningDelegate = self
           present(nc, animated: true, completion: nil)
       }
}





extension ChatViewController: CLLocationManagerDelegate {
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        print("didUpdateLocations")
        if let location = locations.first {
            print("위도: \(location.coordinate.latitude)")
            print("경도: \(location.coordinate.longitude)")
        } else {
            print("위치 서비스 off 상태")
        }
    }
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        print("위치 서비스 error")
    }
}


